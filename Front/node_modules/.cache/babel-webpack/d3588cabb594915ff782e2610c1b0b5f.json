{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, Output, SecurityContext, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as marked from 'marked';\nimport { Renderer } from 'marked';\nexport { Renderer as MarkedRenderer } from 'marked';\nimport { map, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport * as i3 from '@angular/platform-browser';\n/* eslint-disable */\n\nconst _c0 = [\"*\"];\n\nclass KatexOptions {}\n\nclass LanguagePipe {\n  transform(value, language) {\n    if (value == null) {\n      value = '';\n    }\n\n    if (language == null) {\n      language = '';\n    }\n\n    if (typeof value !== 'string') {\n      console.error(`LanguagePipe has been invoked with an invalid value type [${typeof value}]`);\n      return value;\n    }\n\n    if (typeof language !== 'string') {\n      console.error(`LanguagePipe has been invoked with an invalid parameter [${typeof language}]`);\n      return value;\n    }\n\n    return '```' + language + '\\n' + value + '\\n```';\n  }\n\n}\n\nLanguagePipe.ɵfac = function LanguagePipe_Factory(t) {\n  return new (t || LanguagePipe)();\n};\n\nLanguagePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"language\",\n  type: LanguagePipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LanguagePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'language'\n    }]\n  }], null, null);\n})();\n\nvar PrismPlugin;\n\n(function (PrismPlugin) {\n  PrismPlugin[\"LineHighlight\"] = \"line-highlight\";\n  PrismPlugin[\"LineNumbers\"] = \"line-numbers\";\n})(PrismPlugin || (PrismPlugin = {}));\n\nclass MarkedOptions {}\n/* eslint-disable max-len */\n\n\nconst errorJoyPixelsNotLoaded = '[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information';\nconst errorKatexNotLoaded = '[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information';\nconst errorSrcWithoutHttpClient = '[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';\n/* eslint-enable max-len */\n\nconst SECURITY_CONTEXT = new InjectionToken('SECURITY_CONTEXT');\n\nclass MarkdownService {\n  constructor(platform, securityContext, http, options, sanitizer) {\n    this.platform = platform;\n    this.securityContext = securityContext;\n    this.http = http;\n    this.sanitizer = sanitizer;\n    this.initialMarkedOptions = {\n      renderer: new Renderer()\n    };\n    this.options = options;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(value) {\n    this._options = Object.assign(Object.assign({}, this.initialMarkedOptions), value);\n  }\n\n  get renderer() {\n    return this.options.renderer;\n  }\n\n  set renderer(value) {\n    this.options.renderer = value;\n  }\n\n  compile(markdown, decodeHtml = false, emojify = false, markedOptions = this.options) {\n    const trimmed = this.trimIndentation(markdown);\n    const decoded = decodeHtml ? this.decodeHtml(trimmed) : trimmed;\n    const emojified = emojify ? this.renderEmoji(decoded) : decoded;\n    const compiled = marked.parse(emojified, markedOptions);\n    return this.sanitizer.sanitize(this.securityContext, compiled) || '';\n  }\n\n  getSource(src) {\n    if (!this.http) {\n      throw new Error(errorSrcWithoutHttpClient);\n    }\n\n    return this.http.get(src, {\n      responseType: 'text'\n    }).pipe(map(markdown => this.handleExtension(src, markdown)));\n  }\n\n  highlight(element) {\n    if (!isPlatformBrowser(this.platform)) {\n      return;\n    }\n\n    if (typeof Prism !== 'undefined') {\n      if (!element) {\n        element = document;\n      }\n\n      const noLanguageElements = element.querySelectorAll('pre code:not([class*=\"language-\"])');\n      Array.prototype.forEach.call(noLanguageElements, x => x.classList.add('language-none'));\n      Prism.highlightAllUnder(element);\n    }\n  }\n\n  renderKatex(html, options) {\n    if (!isPlatformBrowser(this.platform)) {\n      return html;\n    }\n\n    if (typeof katex === 'undefined' || typeof katex.renderToString === 'undefined') {\n      throw new Error(errorKatexNotLoaded);\n    }\n\n    return html.replace(/\\$([^\\s][^$]*?[^\\s])\\$/gm, (_, tex) => katex.renderToString(tex, options));\n  }\n\n  decodeHtml(html) {\n    if (!isPlatformBrowser(this.platform)) {\n      return html;\n    }\n\n    const textarea = document.createElement('textarea');\n    textarea.innerHTML = html;\n    return textarea.value;\n  }\n\n  handleExtension(src, markdown) {\n    const extension = src ? src.split('?')[0].split('.').splice(-1).join() : '';\n    return extension !== 'md' ? '```' + extension + '\\n' + markdown + '\\n```' : markdown;\n  }\n\n  renderEmoji(html) {\n    if (!isPlatformBrowser(this.platform)) {\n      return html;\n    }\n\n    if (typeof joypixels === 'undefined' || typeof joypixels.shortnameToUnicode === 'undefined') {\n      throw new Error(errorJoyPixelsNotLoaded);\n    }\n\n    return joypixels.shortnameToUnicode(html);\n  }\n\n  trimIndentation(markdown) {\n    if (!markdown) {\n      return '';\n    }\n\n    let indentStart;\n    return markdown.split('\\n').map(line => {\n      let lineIdentStart = indentStart;\n\n      if (line.length > 0) {\n        lineIdentStart = isNaN(lineIdentStart) ? line.search(/\\S|$/) : Math.min(line.search(/\\S|$/), lineIdentStart);\n      }\n\n      if (isNaN(indentStart)) {\n        indentStart = lineIdentStart;\n      }\n\n      return lineIdentStart ? line.substring(lineIdentStart) : line;\n    }).join('\\n');\n  }\n\n}\n\nMarkdownService.ɵfac = function MarkdownService_Factory(t) {\n  return new (t || MarkdownService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(SECURITY_CONTEXT), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(MarkedOptions, 8), i0.ɵɵinject(i3.DomSanitizer));\n};\n\nMarkdownService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MarkdownService,\n  factory: MarkdownService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.SecurityContext,\n      decorators: [{\n        type: Inject,\n        args: [SECURITY_CONTEXT]\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MarkedOptions,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.DomSanitizer\n    }];\n  }, null);\n})();\n\nclass MarkdownComponent {\n  constructor(element, markdownService) {\n    this.element = element;\n    this.markdownService = markdownService; // Event emitters\n\n    this.error = new EventEmitter();\n    this.load = new EventEmitter();\n    this.ready = new EventEmitter();\n    this._emoji = false;\n    this._katex = false;\n    this._lineHighlight = false;\n    this._lineNumbers = false;\n  } // Plugin - emoji\n\n\n  get emoji() {\n    return this._emoji;\n  }\n\n  set emoji(value) {\n    this._emoji = this.coerceBooleanProperty(value);\n  } // Plugin - katex\n\n\n  get katex() {\n    return this._katex;\n  }\n\n  set katex(value) {\n    this._katex = this.coerceBooleanProperty(value);\n  } // Plugin - lineHighlight\n\n\n  get lineHighlight() {\n    return this._lineHighlight;\n  }\n\n  set lineHighlight(value) {\n    this._lineHighlight = this.coerceBooleanProperty(value);\n  } // Plugin - lineNumbers\n\n\n  get lineNumbers() {\n    return this._lineNumbers;\n  }\n\n  set lineNumbers(value) {\n    this._lineNumbers = this.coerceBooleanProperty(value);\n  }\n\n  ngOnChanges() {\n    if (this.data != null) {\n      this.handleData();\n      return;\n    }\n\n    if (this.src != null) {\n      this.handleSrc();\n      return;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this.data && !this.src) {\n      this.handleTransclusion();\n    }\n  }\n\n  render(markdown, decodeHtml = false) {\n    let compiled = this.markdownService.compile(markdown, decodeHtml, this.emoji);\n    compiled = this.katex ? this.markdownService.renderKatex(compiled, this.katexOptions) : compiled;\n    this.element.nativeElement.innerHTML = compiled;\n    this.handlePlugins();\n    this.markdownService.highlight(this.element.nativeElement);\n    this.ready.emit();\n  }\n\n  coerceBooleanProperty(value) {\n    return value != null && `${String(value)}` !== 'false';\n  }\n\n  handleData() {\n    this.render(this.data);\n  }\n\n  handleSrc() {\n    this.markdownService.getSource(this.src).subscribe(markdown => {\n      this.render(markdown);\n      this.load.emit(markdown);\n    }, error => this.error.emit(error));\n  }\n\n  handleTransclusion() {\n    this.render(this.element.nativeElement.innerHTML, true);\n  }\n\n  handlePlugins() {\n    if (this.lineHighlight) {\n      this.setPluginOptions(this.element.nativeElement, {\n        dataLine: this.line,\n        dataLineOffset: this.lineOffset\n      });\n    }\n\n    if (this.lineNumbers) {\n      this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);\n      this.setPluginOptions(this.element.nativeElement, {\n        dataStart: this.start\n      });\n    }\n  }\n\n  setPluginClass(element, plugin) {\n    const preElements = element.querySelectorAll('pre');\n\n    for (let i = 0; i < preElements.length; i++) {\n      const classes = plugin instanceof Array ? plugin : [plugin];\n      preElements.item(i).classList.add(...classes);\n    }\n  }\n\n  setPluginOptions(element, options) {\n    const preElements = element.querySelectorAll('pre');\n\n    for (let i = 0; i < preElements.length; i++) {\n      Object.keys(options).forEach(option => {\n        const attributeValue = options[option];\n\n        if (attributeValue) {\n          const attributeName = this.toLispCase(option);\n          preElements.item(i).setAttribute(attributeName, attributeValue.toString());\n        }\n      });\n    }\n  }\n\n  toLispCase(value) {\n    const upperChars = value.match(/([A-Z])/g);\n\n    if (!upperChars) {\n      return value;\n    }\n\n    let str = value.toString();\n\n    for (let i = 0, n = upperChars.length; i < n; i++) {\n      str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());\n    }\n\n    if (str.slice(0, 1) === '-') {\n      str = str.slice(1);\n    }\n\n    return str;\n  }\n\n}\n\nMarkdownComponent.ɵfac = function MarkdownComponent_Factory(t) {\n  return new (t || MarkdownComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MarkdownService));\n};\n\nMarkdownComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MarkdownComponent,\n  selectors: [[\"markdown\"], [\"\", \"markdown\", \"\"]],\n  inputs: {\n    data: \"data\",\n    src: \"src\",\n    emoji: \"emoji\",\n    katex: \"katex\",\n    katexOptions: \"katexOptions\",\n    lineHighlight: \"lineHighlight\",\n    line: \"line\",\n    lineOffset: \"lineOffset\",\n    lineNumbers: \"lineNumbers\",\n    start: \"start\"\n  },\n  outputs: {\n    error: \"error\",\n    load: \"load\",\n    ready: \"ready\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MarkdownComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownComponent, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: 'markdown, [markdown]',\n      template: '<ng-content></ng-content>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: MarkdownService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    src: [{\n      type: Input\n    }],\n    emoji: [{\n      type: Input\n    }],\n    katex: [{\n      type: Input\n    }],\n    katexOptions: [{\n      type: Input\n    }],\n    lineHighlight: [{\n      type: Input\n    }],\n    line: [{\n      type: Input\n    }],\n    lineOffset: [{\n      type: Input\n    }],\n    lineNumbers: [{\n      type: Input\n    }],\n    start: [{\n      type: Input\n    }],\n    error: [{\n      type: Output\n    }],\n    load: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }]\n  });\n})();\n\nclass MarkdownPipe {\n  constructor(elementRef, markdownService, zone) {\n    this.elementRef = elementRef;\n    this.markdownService = markdownService;\n    this.zone = zone;\n  }\n\n  transform(value) {\n    if (value == null) {\n      return '';\n    }\n\n    if (typeof value !== 'string') {\n      console.error(`MarkdownPipe has been invoked with an invalid value type [${typeof value}]`);\n      return value;\n    }\n\n    const markdown = this.markdownService.compile(value);\n    this.zone.onStable.pipe(first()).subscribe(() => this.markdownService.highlight(this.elementRef.nativeElement));\n    return markdown;\n  }\n\n}\n\nMarkdownPipe.ɵfac = function MarkdownPipe_Factory(t) {\n  return new (t || MarkdownPipe)(i0.ɵɵdirectiveInject(i0.ElementRef, 16), i0.ɵɵdirectiveInject(MarkdownService, 16), i0.ɵɵdirectiveInject(i0.NgZone, 16));\n};\n\nMarkdownPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"markdown\",\n  type: MarkdownPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'markdown'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: MarkdownService\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nconst sharedDeclarations = [LanguagePipe, MarkdownComponent, MarkdownPipe];\n\nclass MarkdownModule {\n  static forRoot(markdownModuleConfig) {\n    return {\n      ngModule: MarkdownModule,\n      providers: [MarkdownService, markdownModuleConfig && markdownModuleConfig.loader || [], markdownModuleConfig && markdownModuleConfig.markedOptions || [], {\n        provide: SECURITY_CONTEXT,\n        useValue: markdownModuleConfig && markdownModuleConfig.sanitize != null ? markdownModuleConfig.sanitize : SecurityContext.HTML\n      }]\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: MarkdownModule\n    };\n  }\n\n}\n\nMarkdownModule.ɵfac = function MarkdownModule_Factory(t) {\n  return new (t || MarkdownModule)();\n};\n\nMarkdownModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MarkdownModule\n});\nMarkdownModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownModule, [{\n    type: NgModule,\n    args: [{\n      exports: sharedDeclarations,\n      declarations: sharedDeclarations\n    }]\n  }], null, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { KatexOptions, LanguagePipe, MarkdownComponent, MarkdownModule, MarkdownPipe, MarkdownService, MarkedOptions, PrismPlugin, SECURITY_CONTEXT, errorJoyPixelsNotLoaded, errorKatexNotLoaded, errorSrcWithoutHttpClient }; //# sourceMappingURL=ngx-markdown.js.map","map":{"version":3,"sources":["/Users/pablolondono/Desktop/SpringAngular/Fronts/Templates Angular/Fuse_Starter/node_modules/ngx-markdown/fesm2015/ngx-markdown.js"],"names":["i0","Pipe","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","EventEmitter","Component","Input","Output","SecurityContext","NgModule","isPlatformBrowser","marked","Renderer","MarkedRenderer","map","first","i1","i3","KatexOptions","LanguagePipe","transform","value","language","console","error","ɵfac","ɵpipe","type","args","name","PrismPlugin","MarkedOptions","errorJoyPixelsNotLoaded","errorKatexNotLoaded","errorSrcWithoutHttpClient","SECURITY_CONTEXT","MarkdownService","constructor","platform","securityContext","http","options","sanitizer","initialMarkedOptions","renderer","_options","Object","assign","compile","markdown","decodeHtml","emojify","markedOptions","trimmed","trimIndentation","decoded","emojified","renderEmoji","compiled","parse","sanitize","getSource","src","Error","get","responseType","pipe","handleExtension","highlight","element","Prism","document","noLanguageElements","querySelectorAll","Array","prototype","forEach","call","x","classList","add","highlightAllUnder","renderKatex","html","katex","renderToString","replace","_","tex","textarea","createElement","innerHTML","extension","split","splice","join","joypixels","shortnameToUnicode","indentStart","line","lineIdentStart","length","isNaN","search","Math","min","substring","HttpClient","DomSanitizer","ɵprov","decorators","MarkdownComponent","markdownService","load","ready","_emoji","_katex","_lineHighlight","_lineNumbers","emoji","coerceBooleanProperty","lineHighlight","lineNumbers","ngOnChanges","data","handleData","handleSrc","ngAfterViewInit","handleTransclusion","render","katexOptions","nativeElement","handlePlugins","emit","String","subscribe","setPluginOptions","dataLine","dataLineOffset","lineOffset","setPluginClass","LineNumbers","dataStart","start","plugin","preElements","i","classes","item","keys","option","attributeValue","attributeName","toLispCase","setAttribute","toString","upperChars","match","str","n","RegExp","toLowerCase","slice","ElementRef","ɵcmp","selector","template","MarkdownPipe","elementRef","zone","onStable","NgZone","sharedDeclarations","MarkdownModule","forRoot","markdownModuleConfig","ngModule","providers","loader","provide","useValue","HTML","forChild","ɵmod","ɵinj","exports","declarations"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,MAAxD,EAAgEC,QAAhE,EAA0EC,YAA1E,EAAwFC,SAAxF,EAAmGC,KAAnG,EAA0GC,MAA1G,EAAkHC,eAAlH,EAAmIC,QAAnI,QAAmJ,eAAnJ;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASA,QAAQ,IAAIC,cAArB,QAA2C,QAA3C;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,gBAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AAEA;;;;AACA,MAAMC,YAAN,CAAmB;;AAGnB,MAAMC,YAAN,CAAmB;AACfC,EAAAA,SAAS,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACvB,QAAID,KAAK,IAAI,IAAb,EAAmB;AACfA,MAAAA,KAAK,GAAG,EAAR;AACH;;AACD,QAAIC,QAAQ,IAAI,IAAhB,EAAsB;AAClBA,MAAAA,QAAQ,GAAG,EAAX;AACH;;AACD,QAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC3BE,MAAAA,OAAO,CAACC,KAAR,CAAe,6DAA4D,OAAOH,KAAM,GAAxF;AACA,aAAOA,KAAP;AACH;;AACD,QAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkC;AAC9BC,MAAAA,OAAO,CAACC,KAAR,CAAe,4DAA2D,OAAOF,QAAS,GAA1F;AACA,aAAOD,KAAP;AACH;;AACD,WAAO,QAAQC,QAAR,GAAmB,IAAnB,GAA0BD,KAA1B,GAAkC,OAAzC;AACH;;AAjBc;;AAmBnBF,YAAY,CAACM,IAAb;AAAA,mBAAyGN,YAAzG;AAAA;;AACAA,YAAY,CAACO,KAAb,kBAD+F7B,EAC/F;AAAA;AAAA,QAAuGsB,YAAvG;AAAA;AAAA;;AACA;AAAA,qDAF+FtB,EAE/F,mBAA2FsB,YAA3F,EAAqH,CAAC;AAC1GQ,IAAAA,IAAI,EAAE7B,IADoG;AAE1G8B,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,IAAI,EAAE;AADP,KAAD;AAFoG,GAAD,CAArH;AAAA;;AAOA,IAAIC,WAAJ;;AACA,CAAC,UAAUA,WAAV,EAAuB;AACpBA,EAAAA,WAAW,CAAC,eAAD,CAAX,GAA+B,gBAA/B;AACAA,EAAAA,WAAW,CAAC,aAAD,CAAX,GAA6B,cAA7B;AACH,CAHD,EAGGA,WAAW,KAAKA,WAAW,GAAG,EAAnB,CAHd;;AAKA,MAAMC,aAAN,CAAoB;AAGpB;;;AACA,MAAMC,uBAAuB,GAAG,6JAAhC;AACA,MAAMC,mBAAmB,GAAG,qJAA5B;AACA,MAAMC,yBAAyB,GAAG,2JAAlC;AACA;;AACA,MAAMC,gBAAgB,GAAG,IAAIpC,cAAJ,CAAmB,kBAAnB,CAAzB;;AACA,MAAMqC,eAAN,CAAsB;AAClBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,eAAX,EAA4BC,IAA5B,EAAkCC,OAAlC,EAA2CC,SAA3C,EAAsD;AAC7D,SAAKJ,QAAL,GAAgBA,QAAhB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKE,SAAL,GAAiBA,SAAjB;AACA,SAAKC,oBAAL,GAA4B;AACxBC,MAAAA,QAAQ,EAAE,IAAIhC,QAAJ;AADc,KAA5B;AAGA,SAAK6B,OAAL,GAAeA,OAAf;AACH;;AACU,MAAPA,OAAO,GAAG;AAAE,WAAO,KAAKI,QAAZ;AAAuB;;AAC5B,MAAPJ,OAAO,CAACpB,KAAD,EAAQ;AACf,SAAKwB,QAAL,GAAgBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKJ,oBAAvB,CAAd,EAA4DtB,KAA5D,CAAhB;AACH;;AACW,MAARuB,QAAQ,GAAG;AAAE,WAAO,KAAKH,OAAL,CAAaG,QAApB;AAA+B;;AACpC,MAARA,QAAQ,CAACvB,KAAD,EAAQ;AAChB,SAAKoB,OAAL,CAAaG,QAAb,GAAwBvB,KAAxB;AACH;;AACD2B,EAAAA,OAAO,CAACC,QAAD,EAAWC,UAAU,GAAG,KAAxB,EAA+BC,OAAO,GAAG,KAAzC,EAAgDC,aAAa,GAAG,KAAKX,OAArE,EAA8E;AACjF,UAAMY,OAAO,GAAG,KAAKC,eAAL,CAAqBL,QAArB,CAAhB;AACA,UAAMM,OAAO,GAAGL,UAAU,GAAG,KAAKA,UAAL,CAAgBG,OAAhB,CAAH,GAA8BA,OAAxD;AACA,UAAMG,SAAS,GAAGL,OAAO,GAAG,KAAKM,WAAL,CAAiBF,OAAjB,CAAH,GAA+BA,OAAxD;AACA,UAAMG,QAAQ,GAAG/C,MAAM,CAACgD,KAAP,CAAaH,SAAb,EAAwBJ,aAAxB,CAAjB;AACA,WAAO,KAAKV,SAAL,CAAekB,QAAf,CAAwB,KAAKrB,eAA7B,EAA8CmB,QAA9C,KAA2D,EAAlE;AACH;;AACDG,EAAAA,SAAS,CAACC,GAAD,EAAM;AACX,QAAI,CAAC,KAAKtB,IAAV,EAAgB;AACZ,YAAM,IAAIuB,KAAJ,CAAU7B,yBAAV,CAAN;AACH;;AACD,WAAO,KAAKM,IAAL,CACFwB,GADE,CACEF,GADF,EACO;AAAEG,MAAAA,YAAY,EAAE;AAAhB,KADP,EAEFC,IAFE,CAEGpD,GAAG,CAACmC,QAAQ,IAAI,KAAKkB,eAAL,CAAqBL,GAArB,EAA0Bb,QAA1B,CAAb,CAFN,CAAP;AAGH;;AACDmB,EAAAA,SAAS,CAACC,OAAD,EAAU;AACf,QAAI,CAAC3D,iBAAiB,CAAC,KAAK4B,QAAN,CAAtB,EAAuC;AACnC;AACH;;AACD,QAAI,OAAOgC,KAAP,KAAiB,WAArB,EAAkC;AAC9B,UAAI,CAACD,OAAL,EAAc;AACVA,QAAAA,OAAO,GAAGE,QAAV;AACH;;AACD,YAAMC,kBAAkB,GAAGH,OAAO,CAACI,gBAAR,CAAyB,oCAAzB,CAA3B;AACAC,MAAAA,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BL,kBAA7B,EAAkDM,CAAD,IAAOA,CAAC,CAACC,SAAF,CAAYC,GAAZ,CAAgB,eAAhB,CAAxD;AACAV,MAAAA,KAAK,CAACW,iBAAN,CAAwBZ,OAAxB;AACH;AACJ;;AACDa,EAAAA,WAAW,CAACC,IAAD,EAAO1C,OAAP,EAAgB;AACvB,QAAI,CAAC/B,iBAAiB,CAAC,KAAK4B,QAAN,CAAtB,EAAuC;AACnC,aAAO6C,IAAP;AACH;;AACD,QAAI,OAAOC,KAAP,KAAiB,WAAjB,IAAgC,OAAOA,KAAK,CAACC,cAAb,KAAgC,WAApE,EAAiF;AAC7E,YAAM,IAAItB,KAAJ,CAAU9B,mBAAV,CAAN;AACH;;AACD,WAAOkD,IAAI,CAACG,OAAL,CAAa,0BAAb,EAAyC,CAACC,CAAD,EAAIC,GAAJ,KAAYJ,KAAK,CAACC,cAAN,CAAqBG,GAArB,EAA0B/C,OAA1B,CAArD,CAAP;AACH;;AACDS,EAAAA,UAAU,CAACiC,IAAD,EAAO;AACb,QAAI,CAACzE,iBAAiB,CAAC,KAAK4B,QAAN,CAAtB,EAAuC;AACnC,aAAO6C,IAAP;AACH;;AACD,UAAMM,QAAQ,GAAGlB,QAAQ,CAACmB,aAAT,CAAuB,UAAvB,CAAjB;AACAD,IAAAA,QAAQ,CAACE,SAAT,GAAqBR,IAArB;AACA,WAAOM,QAAQ,CAACpE,KAAhB;AACH;;AACD8C,EAAAA,eAAe,CAACL,GAAD,EAAMb,QAAN,EAAgB;AAC3B,UAAM2C,SAAS,GAAG9B,GAAG,GACfA,GAAG,CAAC+B,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkBA,KAAlB,CAAwB,GAAxB,EAA6BC,MAA7B,CAAoC,CAAC,CAArC,EAAwCC,IAAxC,EADe,GAEf,EAFN;AAGA,WAAOH,SAAS,KAAK,IAAd,GACD,QAAQA,SAAR,GAAoB,IAApB,GAA2B3C,QAA3B,GAAsC,OADrC,GAEDA,QAFN;AAGH;;AACDQ,EAAAA,WAAW,CAAC0B,IAAD,EAAO;AACd,QAAI,CAACzE,iBAAiB,CAAC,KAAK4B,QAAN,CAAtB,EAAuC;AACnC,aAAO6C,IAAP;AACH;;AACD,QAAI,OAAOa,SAAP,KAAqB,WAArB,IAAoC,OAAOA,SAAS,CAACC,kBAAjB,KAAwC,WAAhF,EAA6F;AACzF,YAAM,IAAIlC,KAAJ,CAAU/B,uBAAV,CAAN;AACH;;AACD,WAAOgE,SAAS,CAACC,kBAAV,CAA6Bd,IAA7B,CAAP;AACH;;AACD7B,EAAAA,eAAe,CAACL,QAAD,EAAW;AACtB,QAAI,CAACA,QAAL,EAAe;AACX,aAAO,EAAP;AACH;;AACD,QAAIiD,WAAJ;AACA,WAAOjD,QAAQ,CACV4C,KADE,CACI,IADJ,EAEF/E,GAFE,CAEEqF,IAAI,IAAI;AACb,UAAIC,cAAc,GAAGF,WAArB;;AACA,UAAIC,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACjBD,QAAAA,cAAc,GAAGE,KAAK,CAACF,cAAD,CAAL,GACXD,IAAI,CAACI,MAAL,CAAY,MAAZ,CADW,GAEXC,IAAI,CAACC,GAAL,CAASN,IAAI,CAACI,MAAL,CAAY,MAAZ,CAAT,EAA8BH,cAA9B,CAFN;AAGH;;AACD,UAAIE,KAAK,CAACJ,WAAD,CAAT,EAAwB;AACpBA,QAAAA,WAAW,GAAGE,cAAd;AACH;;AACD,aAAOA,cAAc,GACfD,IAAI,CAACO,SAAL,CAAeN,cAAf,CADe,GAEfD,IAFN;AAGH,KAfM,EAeJJ,IAfI,CAeC,IAfD,CAAP;AAgBH;;AAtGiB;;AAwGtB3D,eAAe,CAACX,IAAhB;AAAA,mBAA4GW,eAA5G,EAhI+FvC,EAgI/F,UAA6IG,WAA7I,GAhI+FH,EAgI/F,UAAqKsC,gBAArK,GAhI+FtC,EAgI/F,UAAkMmB,EAAE,CAAC2F,UAArM,MAhI+F9G,EAgI/F,UAA4OkC,aAA5O,MAhI+FlC,EAgI/F,UAAsRoB,EAAE,CAAC2F,YAAzR;AAAA;;AACAxE,eAAe,CAACyE,KAAhB,kBAjI+FhH,EAiI/F;AAAA,SAAgHuC,eAAhH;AAAA,WAAgHA,eAAhH;AAAA;;AACA;AAAA,qDAlI+FvC,EAkI/F,mBAA2FuC,eAA3F,EAAwH,CAAC;AAC7GT,IAAAA,IAAI,EAAE1B;AADuG,GAAD,CAAxH,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAE0B,MAAAA,IAAI,EAAEmB,MAAR;AAAgBgE,MAAAA,UAAU,EAAE,CAAC;AAC3DnF,QAAAA,IAAI,EAAEzB,MADqD;AAE3D0B,QAAAA,IAAI,EAAE,CAAC5B,WAAD;AAFqD,OAAD;AAA5B,KAAD,EAG3B;AAAE2B,MAAAA,IAAI,EAAE9B,EAAE,CAACW,eAAX;AAA4BsG,MAAAA,UAAU,EAAE,CAAC;AAC3CnF,QAAAA,IAAI,EAAEzB,MADqC;AAE3C0B,QAAAA,IAAI,EAAE,CAACO,gBAAD;AAFqC,OAAD;AAAxC,KAH2B,EAM3B;AAAER,MAAAA,IAAI,EAAEX,EAAE,CAAC2F,UAAX;AAAuBG,MAAAA,UAAU,EAAE,CAAC;AACtCnF,QAAAA,IAAI,EAAExB;AADgC,OAAD;AAAnC,KAN2B,EAQ3B;AAAEwB,MAAAA,IAAI,EAAEI,aAAR;AAAuB+E,MAAAA,UAAU,EAAE,CAAC;AACtCnF,QAAAA,IAAI,EAAExB;AADgC,OAAD;AAAnC,KAR2B,EAU3B;AAAEwB,MAAAA,IAAI,EAAEV,EAAE,CAAC2F;AAAX,KAV2B,CAAP;AAUS,GAZnD;AAAA;;AAcA,MAAMG,iBAAN,CAAwB;AACpB1E,EAAAA,WAAW,CAACgC,OAAD,EAAU2C,eAAV,EAA2B;AAClC,SAAK3C,OAAL,GAAeA,OAAf;AACA,SAAK2C,eAAL,GAAuBA,eAAvB,CAFkC,CAGlC;;AACA,SAAKxF,KAAL,GAAa,IAAIpB,YAAJ,EAAb;AACA,SAAK6G,IAAL,GAAY,IAAI7G,YAAJ,EAAZ;AACA,SAAK8G,KAAL,GAAa,IAAI9G,YAAJ,EAAb;AACA,SAAK+G,MAAL,GAAc,KAAd;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACH,GAZmB,CAapB;;;AACS,MAALC,KAAK,GAAG;AAAE,WAAO,KAAKJ,MAAZ;AAAqB;;AAC1B,MAALI,KAAK,CAAClG,KAAD,EAAQ;AAAE,SAAK8F,MAAL,GAAc,KAAKK,qBAAL,CAA2BnG,KAA3B,CAAd;AAAkD,GAfjD,CAgBpB;;;AACS,MAAL+D,KAAK,GAAG;AAAE,WAAO,KAAKgC,MAAZ;AAAqB;;AAC1B,MAALhC,KAAK,CAAC/D,KAAD,EAAQ;AAAE,SAAK+F,MAAL,GAAc,KAAKI,qBAAL,CAA2BnG,KAA3B,CAAd;AAAkD,GAlBjD,CAmBpB;;;AACiB,MAAboG,aAAa,GAAG;AAAE,WAAO,KAAKJ,cAAZ;AAA6B;;AAClC,MAAbI,aAAa,CAACpG,KAAD,EAAQ;AAAE,SAAKgG,cAAL,GAAsB,KAAKG,qBAAL,CAA2BnG,KAA3B,CAAtB;AAA0D,GArBjE,CAsBpB;;;AACe,MAAXqG,WAAW,GAAG;AAAE,WAAO,KAAKJ,YAAZ;AAA2B;;AAChC,MAAXI,WAAW,CAACrG,KAAD,EAAQ;AAAE,SAAKiG,YAAL,GAAoB,KAAKE,qBAAL,CAA2BnG,KAA3B,CAApB;AAAwD;;AACjFsG,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKC,IAAL,IAAa,IAAjB,EAAuB;AACnB,WAAKC,UAAL;AACA;AACH;;AACD,QAAI,KAAK/D,GAAL,IAAY,IAAhB,EAAsB;AAClB,WAAKgE,SAAL;AACA;AACH;AACJ;;AACDC,EAAAA,eAAe,GAAG;AACd,QAAI,CAAC,KAAKH,IAAN,IAAc,CAAC,KAAK9D,GAAxB,EAA6B;AACzB,WAAKkE,kBAAL;AACH;AACJ;;AACDC,EAAAA,MAAM,CAAChF,QAAD,EAAWC,UAAU,GAAG,KAAxB,EAA+B;AACjC,QAAIQ,QAAQ,GAAG,KAAKsD,eAAL,CAAqBhE,OAArB,CAA6BC,QAA7B,EAAuCC,UAAvC,EAAmD,KAAKqE,KAAxD,CAAf;AACA7D,IAAAA,QAAQ,GAAG,KAAK0B,KAAL,GAAa,KAAK4B,eAAL,CAAqB9B,WAArB,CAAiCxB,QAAjC,EAA2C,KAAKwE,YAAhD,CAAb,GAA6ExE,QAAxF;AACA,SAAKW,OAAL,CAAa8D,aAAb,CAA2BxC,SAA3B,GAAuCjC,QAAvC;AACA,SAAK0E,aAAL;AACA,SAAKpB,eAAL,CAAqB5C,SAArB,CAA+B,KAAKC,OAAL,CAAa8D,aAA5C;AACA,SAAKjB,KAAL,CAAWmB,IAAX;AACH;;AACDb,EAAAA,qBAAqB,CAACnG,KAAD,EAAQ;AACzB,WAAOA,KAAK,IAAI,IAAT,IAAkB,GAAEiH,MAAM,CAACjH,KAAD,CAAQ,EAAjB,KAAuB,OAA/C;AACH;;AACDwG,EAAAA,UAAU,GAAG;AACT,SAAKI,MAAL,CAAY,KAAKL,IAAjB;AACH;;AACDE,EAAAA,SAAS,GAAG;AACR,SAAKd,eAAL,CACKnD,SADL,CACe,KAAKC,GADpB,EAEKyE,SAFL,CAEetF,QAAQ,IAAI;AACvB,WAAKgF,MAAL,CAAYhF,QAAZ;AACA,WAAKgE,IAAL,CAAUoB,IAAV,CAAepF,QAAf;AACH,KALD,EAKGzB,KAAK,IAAI,KAAKA,KAAL,CAAW6G,IAAX,CAAgB7G,KAAhB,CALZ;AAMH;;AACDwG,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,MAAL,CAAY,KAAK5D,OAAL,CAAa8D,aAAb,CAA2BxC,SAAvC,EAAkD,IAAlD;AACH;;AACDyC,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKX,aAAT,EAAwB;AACpB,WAAKe,gBAAL,CAAsB,KAAKnE,OAAL,CAAa8D,aAAnC,EAAkD;AAAEM,QAAAA,QAAQ,EAAE,KAAKtC,IAAjB;AAAuBuC,QAAAA,cAAc,EAAE,KAAKC;AAA5C,OAAlD;AACH;;AACD,QAAI,KAAKjB,WAAT,EAAsB;AAClB,WAAKkB,cAAL,CAAoB,KAAKvE,OAAL,CAAa8D,aAAjC,EAAgDrG,WAAW,CAAC+G,WAA5D;AACA,WAAKL,gBAAL,CAAsB,KAAKnE,OAAL,CAAa8D,aAAnC,EAAkD;AAAEW,QAAAA,SAAS,EAAE,KAAKC;AAAlB,OAAlD;AACH;AACJ;;AACDH,EAAAA,cAAc,CAACvE,OAAD,EAAU2E,MAAV,EAAkB;AAC5B,UAAMC,WAAW,GAAG5E,OAAO,CAACI,gBAAR,CAAyB,KAAzB,CAApB;;AACA,SAAK,IAAIyE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAAC5C,MAAhC,EAAwC6C,CAAC,EAAzC,EAA6C;AACzC,YAAMC,OAAO,GAAGH,MAAM,YAAYtE,KAAlB,GAA0BsE,MAA1B,GAAmC,CAACA,MAAD,CAAnD;AACAC,MAAAA,WAAW,CAACG,IAAZ,CAAiBF,CAAjB,EAAoBnE,SAApB,CAA8BC,GAA9B,CAAkC,GAAGmE,OAArC;AACH;AACJ;;AACDX,EAAAA,gBAAgB,CAACnE,OAAD,EAAU5B,OAAV,EAAmB;AAC/B,UAAMwG,WAAW,GAAG5E,OAAO,CAACI,gBAAR,CAAyB,KAAzB,CAApB;;AACA,SAAK,IAAIyE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAAC5C,MAAhC,EAAwC6C,CAAC,EAAzC,EAA6C;AACzCpG,MAAAA,MAAM,CAACuG,IAAP,CAAY5G,OAAZ,EAAqBmC,OAArB,CAA6B0E,MAAM,IAAI;AACnC,cAAMC,cAAc,GAAG9G,OAAO,CAAC6G,MAAD,CAA9B;;AACA,YAAIC,cAAJ,EAAoB;AAChB,gBAAMC,aAAa,GAAG,KAAKC,UAAL,CAAgBH,MAAhB,CAAtB;AACAL,UAAAA,WAAW,CAACG,IAAZ,CAAiBF,CAAjB,EAAoBQ,YAApB,CAAiCF,aAAjC,EAAgDD,cAAc,CAACI,QAAf,EAAhD;AACH;AACJ,OAND;AAOH;AACJ;;AACDF,EAAAA,UAAU,CAACpI,KAAD,EAAQ;AACd,UAAMuI,UAAU,GAAGvI,KAAK,CAACwI,KAAN,CAAY,UAAZ,CAAnB;;AACA,QAAI,CAACD,UAAL,EAAiB;AACb,aAAOvI,KAAP;AACH;;AACD,QAAIyI,GAAG,GAAGzI,KAAK,CAACsI,QAAN,EAAV;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAR,EAAWa,CAAC,GAAGH,UAAU,CAACvD,MAA/B,EAAuC6C,CAAC,GAAGa,CAA3C,EAA8Cb,CAAC,EAA/C,EAAmD;AAC/CY,MAAAA,GAAG,GAAGA,GAAG,CAACxE,OAAJ,CAAY,IAAI0E,MAAJ,CAAWJ,UAAU,CAACV,CAAD,CAArB,CAAZ,EAAuC,MAAMU,UAAU,CAACV,CAAD,CAAV,CAAce,WAAd,EAA7C,CAAN;AACH;;AACD,QAAIH,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAa,CAAb,MAAoB,GAAxB,EAA6B;AACzBJ,MAAAA,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAN;AACH;;AACD,WAAOJ,GAAP;AACH;;AA1GmB;;AA4GxB/C,iBAAiB,CAACtF,IAAlB;AAAA,mBAA8GsF,iBAA9G,EA5P+FlH,EA4P/F,mBAAiJA,EAAE,CAACsK,UAApJ,GA5P+FtK,EA4P/F,mBAA2KuC,eAA3K;AAAA;;AACA2E,iBAAiB,CAACqD,IAAlB,kBA7P+FvK,EA6P/F;AAAA,QAAkGkH,iBAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA7P+FlH,EA6P/F;AAAA;AAAA;AAAA;AAAA;AAAA;AA7P+FA,MAAAA,EA6P/F;AA7P+FA,MAAAA,EA6PyX,gBAAxd;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDA9P+FA,EA8P/F,mBAA2FkH,iBAA3F,EAA0H,CAAC;AAC/GpF,IAAAA,IAAI,EAAEtB,SADyG;AAE/GuB,IAAAA,IAAI,EAAE,CAAC;AACC;AACAyI,MAAAA,QAAQ,EAAE,sBAFX;AAGCC,MAAAA,QAAQ,EAAE;AAHX,KAAD;AAFyG,GAAD,CAA1H,EAO4B,YAAY;AAAE,WAAO,CAAC;AAAE3I,MAAAA,IAAI,EAAE9B,EAAE,CAACsK;AAAX,KAAD,EAA0B;AAAExI,MAAAA,IAAI,EAAES;AAAR,KAA1B,CAAP;AAA8D,GAPxG,EAO0H;AAAEwF,IAAAA,IAAI,EAAE,CAAC;AACnHjG,MAAAA,IAAI,EAAErB;AAD6G,KAAD,CAAR;AAE1GwD,IAAAA,GAAG,EAAE,CAAC;AACNnC,MAAAA,IAAI,EAAErB;AADA,KAAD,CAFqG;AAI1GiH,IAAAA,KAAK,EAAE,CAAC;AACR5F,MAAAA,IAAI,EAAErB;AADE,KAAD,CAJmG;AAM1G8E,IAAAA,KAAK,EAAE,CAAC;AACRzD,MAAAA,IAAI,EAAErB;AADE,KAAD,CANmG;AAQ1G4H,IAAAA,YAAY,EAAE,CAAC;AACfvG,MAAAA,IAAI,EAAErB;AADS,KAAD,CAR4F;AAU1GmH,IAAAA,aAAa,EAAE,CAAC;AAChB9F,MAAAA,IAAI,EAAErB;AADU,KAAD,CAV2F;AAY1G6F,IAAAA,IAAI,EAAE,CAAC;AACPxE,MAAAA,IAAI,EAAErB;AADC,KAAD,CAZoG;AAc1GqI,IAAAA,UAAU,EAAE,CAAC;AACbhH,MAAAA,IAAI,EAAErB;AADO,KAAD,CAd8F;AAgB1GoH,IAAAA,WAAW,EAAE,CAAC;AACd/F,MAAAA,IAAI,EAAErB;AADQ,KAAD,CAhB6F;AAkB1GyI,IAAAA,KAAK,EAAE,CAAC;AACRpH,MAAAA,IAAI,EAAErB;AADE,KAAD,CAlBmG;AAoB1GkB,IAAAA,KAAK,EAAE,CAAC;AACRG,MAAAA,IAAI,EAAEpB;AADE,KAAD,CApBmG;AAsB1G0G,IAAAA,IAAI,EAAE,CAAC;AACPtF,MAAAA,IAAI,EAAEpB;AADC,KAAD,CAtBoG;AAwB1G2G,IAAAA,KAAK,EAAE,CAAC;AACRvF,MAAAA,IAAI,EAAEpB;AADE,KAAD;AAxBmG,GAP1H;AAAA;;AAmCA,MAAMgK,YAAN,CAAmB;AACflI,EAAAA,WAAW,CAACmI,UAAD,EAAaxD,eAAb,EAA8ByD,IAA9B,EAAoC;AAC3C,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKxD,eAAL,GAAuBA,eAAvB;AACA,SAAKyD,IAAL,GAAYA,IAAZ;AACH;;AACDrJ,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACf,aAAO,EAAP;AACH;;AACD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3BE,MAAAA,OAAO,CAACC,KAAR,CAAe,6DAA4D,OAAOH,KAAM,GAAxF;AACA,aAAOA,KAAP;AACH;;AACD,UAAM4B,QAAQ,GAAG,KAAK+D,eAAL,CAAqBhE,OAArB,CAA6B3B,KAA7B,CAAjB;AACA,SAAKoJ,IAAL,CAAUC,QAAV,CACKxG,IADL,CACUnD,KAAK,EADf,EAEKwH,SAFL,CAEe,MAAM,KAAKvB,eAAL,CAAqB5C,SAArB,CAA+B,KAAKoG,UAAL,CAAgBrC,aAA/C,CAFrB;AAGA,WAAOlF,QAAP;AACH;;AAnBc;;AAqBnBsH,YAAY,CAAC9I,IAAb;AAAA,mBAAyG8I,YAAzG,EAtT+F1K,EAsT/F,mBAAuIA,EAAE,CAACsK,UAA1I,OAtT+FtK,EAsT/F,mBAAiKuC,eAAjK,OAtT+FvC,EAsT/F,mBAA6LA,EAAE,CAAC8K,MAAhM;AAAA;;AACAJ,YAAY,CAAC7I,KAAb,kBAvT+F7B,EAuT/F;AAAA;AAAA,QAAuG0K,YAAvG;AAAA;AAAA;;AACA;AAAA,qDAxT+F1K,EAwT/F,mBAA2F0K,YAA3F,EAAqH,CAAC;AAC1G5I,IAAAA,IAAI,EAAE7B,IADoG;AAE1G8B,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,IAAI,EAAE;AADP,KAAD;AAFoG,GAAD,CAArH,EAK4B,YAAY;AAAE,WAAO,CAAC;AAAEF,MAAAA,IAAI,EAAE9B,EAAE,CAACsK;AAAX,KAAD,EAA0B;AAAExI,MAAAA,IAAI,EAAES;AAAR,KAA1B,EAAqD;AAAET,MAAAA,IAAI,EAAE9B,EAAE,CAAC8K;AAAX,KAArD,CAAP;AAAmF,GAL7H;AAAA;;AAOA,MAAMC,kBAAkB,GAAG,CACvBzJ,YADuB,EAEvB4F,iBAFuB,EAGvBwD,YAHuB,CAA3B;;AAKA,MAAMM,cAAN,CAAqB;AACH,SAAPC,OAAO,CAACC,oBAAD,EAAuB;AACjC,WAAO;AACHC,MAAAA,QAAQ,EAAEH,cADP;AAEHI,MAAAA,SAAS,EAAE,CACP7I,eADO,EAEP2I,oBAAoB,IAAIA,oBAAoB,CAACG,MAA7C,IAAuD,EAFhD,EAGPH,oBAAoB,IAAIA,oBAAoB,CAAC3H,aAA7C,IAA8D,EAHvD,EAIP;AACI+H,QAAAA,OAAO,EAAEhJ,gBADb;AAEIiJ,QAAAA,QAAQ,EAAEL,oBAAoB,IAAIA,oBAAoB,CAACnH,QAArB,IAAiC,IAAzD,GACJmH,oBAAoB,CAACnH,QADjB,GAEJpD,eAAe,CAAC6K;AAJ1B,OAJO;AAFR,KAAP;AAcH;;AACc,SAARC,QAAQ,GAAG;AACd,WAAO;AACHN,MAAAA,QAAQ,EAAEH;AADP,KAAP;AAGH;;AArBgB;;AAuBrBA,cAAc,CAACpJ,IAAf;AAAA,mBAA2GoJ,cAA3G;AAAA;;AACAA,cAAc,CAACU,IAAf,kBA5V+F1L,EA4V/F;AAAA,QAA4GgL;AAA5G;AAKAA,cAAc,CAACW,IAAf,kBAjW+F3L,EAiW/F;;AACA;AAAA,qDAlW+FA,EAkW/F,mBAA2FgL,cAA3F,EAAuH,CAAC;AAC5GlJ,IAAAA,IAAI,EAAElB,QADsG;AAE5GmB,IAAAA,IAAI,EAAE,CAAC;AACC6J,MAAAA,OAAO,EAAEb,kBADV;AAECc,MAAAA,YAAY,EAAEd;AAFf,KAAD;AAFsG,GAAD,CAAvH;AAAA;AAQA;AACA;AACA;;;AAEA,SAAS1J,YAAT,EAAuBC,YAAvB,EAAqC4F,iBAArC,EAAwD8D,cAAxD,EAAwEN,YAAxE,EAAsFnI,eAAtF,EAAuGL,aAAvG,EAAsHD,WAAtH,EAAmIK,gBAAnI,EAAqJH,uBAArJ,EAA8KC,mBAA9K,EAAmMC,yBAAnM,G,CACA","sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, Output, SecurityContext, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as marked from 'marked';\nimport { Renderer } from 'marked';\nexport { Renderer as MarkedRenderer } from 'marked';\nimport { map, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport * as i3 from '@angular/platform-browser';\n\n/* eslint-disable */\r\nclass KatexOptions {\r\n}\n\nclass LanguagePipe {\r\n    transform(value, language) {\r\n        if (value == null) {\r\n            value = '';\r\n        }\r\n        if (language == null) {\r\n            language = '';\r\n        }\r\n        if (typeof value !== 'string') {\r\n            console.error(`LanguagePipe has been invoked with an invalid value type [${typeof value}]`);\r\n            return value;\r\n        }\r\n        if (typeof language !== 'string') {\r\n            console.error(`LanguagePipe has been invoked with an invalid parameter [${typeof language}]`);\r\n            return value;\r\n        }\r\n        return '```' + language + '\\n' + value + '\\n```';\r\n    }\r\n}\r\nLanguagePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: LanguagePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nLanguagePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: LanguagePipe, name: \"language\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: LanguagePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'language',\r\n                }]\r\n        }] });\n\nvar PrismPlugin;\r\n(function (PrismPlugin) {\r\n    PrismPlugin[\"LineHighlight\"] = \"line-highlight\";\r\n    PrismPlugin[\"LineNumbers\"] = \"line-numbers\";\r\n})(PrismPlugin || (PrismPlugin = {}));\n\nclass MarkedOptions {\r\n}\n\n/* eslint-disable max-len */\r\nconst errorJoyPixelsNotLoaded = '[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information';\r\nconst errorKatexNotLoaded = '[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information';\r\nconst errorSrcWithoutHttpClient = '[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';\r\n/* eslint-enable max-len */\r\nconst SECURITY_CONTEXT = new InjectionToken('SECURITY_CONTEXT');\r\nclass MarkdownService {\r\n    constructor(platform, securityContext, http, options, sanitizer) {\r\n        this.platform = platform;\r\n        this.securityContext = securityContext;\r\n        this.http = http;\r\n        this.sanitizer = sanitizer;\r\n        this.initialMarkedOptions = {\r\n            renderer: new Renderer(),\r\n        };\r\n        this.options = options;\r\n    }\r\n    get options() { return this._options; }\r\n    set options(value) {\r\n        this._options = Object.assign(Object.assign({}, this.initialMarkedOptions), value);\r\n    }\r\n    get renderer() { return this.options.renderer; }\r\n    set renderer(value) {\r\n        this.options.renderer = value;\r\n    }\r\n    compile(markdown, decodeHtml = false, emojify = false, markedOptions = this.options) {\r\n        const trimmed = this.trimIndentation(markdown);\r\n        const decoded = decodeHtml ? this.decodeHtml(trimmed) : trimmed;\r\n        const emojified = emojify ? this.renderEmoji(decoded) : decoded;\r\n        const compiled = marked.parse(emojified, markedOptions);\r\n        return this.sanitizer.sanitize(this.securityContext, compiled) || '';\r\n    }\r\n    getSource(src) {\r\n        if (!this.http) {\r\n            throw new Error(errorSrcWithoutHttpClient);\r\n        }\r\n        return this.http\r\n            .get(src, { responseType: 'text' })\r\n            .pipe(map(markdown => this.handleExtension(src, markdown)));\r\n    }\r\n    highlight(element) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return;\r\n        }\r\n        if (typeof Prism !== 'undefined') {\r\n            if (!element) {\r\n                element = document;\r\n            }\r\n            const noLanguageElements = element.querySelectorAll('pre code:not([class*=\"language-\"])');\r\n            Array.prototype.forEach.call(noLanguageElements, (x) => x.classList.add('language-none'));\r\n            Prism.highlightAllUnder(element);\r\n        }\r\n    }\r\n    renderKatex(html, options) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return html;\r\n        }\r\n        if (typeof katex === 'undefined' || typeof katex.renderToString === 'undefined') {\r\n            throw new Error(errorKatexNotLoaded);\r\n        }\r\n        return html.replace(/\\$([^\\s][^$]*?[^\\s])\\$/gm, (_, tex) => katex.renderToString(tex, options));\r\n    }\r\n    decodeHtml(html) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return html;\r\n        }\r\n        const textarea = document.createElement('textarea');\r\n        textarea.innerHTML = html;\r\n        return textarea.value;\r\n    }\r\n    handleExtension(src, markdown) {\r\n        const extension = src\r\n            ? src.split('?')[0].split('.').splice(-1).join()\r\n            : '';\r\n        return extension !== 'md'\r\n            ? '```' + extension + '\\n' + markdown + '\\n```'\r\n            : markdown;\r\n    }\r\n    renderEmoji(html) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return html;\r\n        }\r\n        if (typeof joypixels === 'undefined' || typeof joypixels.shortnameToUnicode === 'undefined') {\r\n            throw new Error(errorJoyPixelsNotLoaded);\r\n        }\r\n        return joypixels.shortnameToUnicode(html);\r\n    }\r\n    trimIndentation(markdown) {\r\n        if (!markdown) {\r\n            return '';\r\n        }\r\n        let indentStart;\r\n        return markdown\r\n            .split('\\n')\r\n            .map(line => {\r\n            let lineIdentStart = indentStart;\r\n            if (line.length > 0) {\r\n                lineIdentStart = isNaN(lineIdentStart)\r\n                    ? line.search(/\\S|$/)\r\n                    : Math.min(line.search(/\\S|$/), lineIdentStart);\r\n            }\r\n            if (isNaN(indentStart)) {\r\n                indentStart = lineIdentStart;\r\n            }\r\n            return lineIdentStart\r\n                ? line.substring(lineIdentStart)\r\n                : line;\r\n        }).join('\\n');\r\n    }\r\n}\r\nMarkdownService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownService, deps: [{ token: PLATFORM_ID }, { token: SECURITY_CONTEXT }, { token: i1.HttpClient, optional: true }, { token: MarkedOptions, optional: true }, { token: i3.DomSanitizer }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMarkdownService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }, { type: i0.SecurityContext, decorators: [{\r\n                    type: Inject,\r\n                    args: [SECURITY_CONTEXT]\r\n                }] }, { type: i1.HttpClient, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: MarkedOptions, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i3.DomSanitizer }]; } });\n\nclass MarkdownComponent {\r\n    constructor(element, markdownService) {\r\n        this.element = element;\r\n        this.markdownService = markdownService;\r\n        // Event emitters\r\n        this.error = new EventEmitter();\r\n        this.load = new EventEmitter();\r\n        this.ready = new EventEmitter();\r\n        this._emoji = false;\r\n        this._katex = false;\r\n        this._lineHighlight = false;\r\n        this._lineNumbers = false;\r\n    }\r\n    // Plugin - emoji\r\n    get emoji() { return this._emoji; }\r\n    set emoji(value) { this._emoji = this.coerceBooleanProperty(value); }\r\n    // Plugin - katex\r\n    get katex() { return this._katex; }\r\n    set katex(value) { this._katex = this.coerceBooleanProperty(value); }\r\n    // Plugin - lineHighlight\r\n    get lineHighlight() { return this._lineHighlight; }\r\n    set lineHighlight(value) { this._lineHighlight = this.coerceBooleanProperty(value); }\r\n    // Plugin - lineNumbers\r\n    get lineNumbers() { return this._lineNumbers; }\r\n    set lineNumbers(value) { this._lineNumbers = this.coerceBooleanProperty(value); }\r\n    ngOnChanges() {\r\n        if (this.data != null) {\r\n            this.handleData();\r\n            return;\r\n        }\r\n        if (this.src != null) {\r\n            this.handleSrc();\r\n            return;\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.data && !this.src) {\r\n            this.handleTransclusion();\r\n        }\r\n    }\r\n    render(markdown, decodeHtml = false) {\r\n        let compiled = this.markdownService.compile(markdown, decodeHtml, this.emoji);\r\n        compiled = this.katex ? this.markdownService.renderKatex(compiled, this.katexOptions) : compiled;\r\n        this.element.nativeElement.innerHTML = compiled;\r\n        this.handlePlugins();\r\n        this.markdownService.highlight(this.element.nativeElement);\r\n        this.ready.emit();\r\n    }\r\n    coerceBooleanProperty(value) {\r\n        return value != null && `${String(value)}` !== 'false';\r\n    }\r\n    handleData() {\r\n        this.render(this.data);\r\n    }\r\n    handleSrc() {\r\n        this.markdownService\r\n            .getSource(this.src)\r\n            .subscribe(markdown => {\r\n            this.render(markdown);\r\n            this.load.emit(markdown);\r\n        }, error => this.error.emit(error));\r\n    }\r\n    handleTransclusion() {\r\n        this.render(this.element.nativeElement.innerHTML, true);\r\n    }\r\n    handlePlugins() {\r\n        if (this.lineHighlight) {\r\n            this.setPluginOptions(this.element.nativeElement, { dataLine: this.line, dataLineOffset: this.lineOffset });\r\n        }\r\n        if (this.lineNumbers) {\r\n            this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);\r\n            this.setPluginOptions(this.element.nativeElement, { dataStart: this.start });\r\n        }\r\n    }\r\n    setPluginClass(element, plugin) {\r\n        const preElements = element.querySelectorAll('pre');\r\n        for (let i = 0; i < preElements.length; i++) {\r\n            const classes = plugin instanceof Array ? plugin : [plugin];\r\n            preElements.item(i).classList.add(...classes);\r\n        }\r\n    }\r\n    setPluginOptions(element, options) {\r\n        const preElements = element.querySelectorAll('pre');\r\n        for (let i = 0; i < preElements.length; i++) {\r\n            Object.keys(options).forEach(option => {\r\n                const attributeValue = options[option];\r\n                if (attributeValue) {\r\n                    const attributeName = this.toLispCase(option);\r\n                    preElements.item(i).setAttribute(attributeName, attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n    }\r\n    toLispCase(value) {\r\n        const upperChars = value.match(/([A-Z])/g);\r\n        if (!upperChars) {\r\n            return value;\r\n        }\r\n        let str = value.toString();\r\n        for (let i = 0, n = upperChars.length; i < n; i++) {\r\n            str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());\r\n        }\r\n        if (str.slice(0, 1) === '-') {\r\n            str = str.slice(1);\r\n        }\r\n        return str;\r\n    }\r\n}\r\nMarkdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownComponent, deps: [{ token: i0.ElementRef }, { token: MarkdownService }], target: i0.ɵɵFactoryTarget.Component });\r\nMarkdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.0\", type: MarkdownComponent, selector: \"markdown, [markdown]\", inputs: { data: \"data\", src: \"src\", emoji: \"emoji\", katex: \"katex\", katexOptions: \"katexOptions\", lineHighlight: \"lineHighlight\", line: \"line\", lineOffset: \"lineOffset\", lineNumbers: \"lineNumbers\", start: \"start\" }, outputs: { error: \"error\", load: \"load\", ready: \"ready\" }, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    // eslint-disable-next-line @angular-eslint/component-selector\r\n                    selector: 'markdown, [markdown]',\r\n                    template: '<ng-content></ng-content>',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MarkdownService }]; }, propDecorators: { data: [{\r\n                type: Input\r\n            }], src: [{\r\n                type: Input\r\n            }], emoji: [{\r\n                type: Input\r\n            }], katex: [{\r\n                type: Input\r\n            }], katexOptions: [{\r\n                type: Input\r\n            }], lineHighlight: [{\r\n                type: Input\r\n            }], line: [{\r\n                type: Input\r\n            }], lineOffset: [{\r\n                type: Input\r\n            }], lineNumbers: [{\r\n                type: Input\r\n            }], start: [{\r\n                type: Input\r\n            }], error: [{\r\n                type: Output\r\n            }], load: [{\r\n                type: Output\r\n            }], ready: [{\r\n                type: Output\r\n            }] } });\n\nclass MarkdownPipe {\r\n    constructor(elementRef, markdownService, zone) {\r\n        this.elementRef = elementRef;\r\n        this.markdownService = markdownService;\r\n        this.zone = zone;\r\n    }\r\n    transform(value) {\r\n        if (value == null) {\r\n            return '';\r\n        }\r\n        if (typeof value !== 'string') {\r\n            console.error(`MarkdownPipe has been invoked with an invalid value type [${typeof value}]`);\r\n            return value;\r\n        }\r\n        const markdown = this.markdownService.compile(value);\r\n        this.zone.onStable\r\n            .pipe(first())\r\n            .subscribe(() => this.markdownService.highlight(this.elementRef.nativeElement));\r\n        return markdown;\r\n    }\r\n}\r\nMarkdownPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownPipe, deps: [{ token: i0.ElementRef }, { token: MarkdownService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Pipe });\r\nMarkdownPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownPipe, name: \"markdown\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'markdown',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MarkdownService }, { type: i0.NgZone }]; } });\n\nconst sharedDeclarations = [\r\n    LanguagePipe,\r\n    MarkdownComponent,\r\n    MarkdownPipe,\r\n];\r\nclass MarkdownModule {\r\n    static forRoot(markdownModuleConfig) {\r\n        return {\r\n            ngModule: MarkdownModule,\r\n            providers: [\r\n                MarkdownService,\r\n                markdownModuleConfig && markdownModuleConfig.loader || [],\r\n                markdownModuleConfig && markdownModuleConfig.markedOptions || [],\r\n                {\r\n                    provide: SECURITY_CONTEXT,\r\n                    useValue: markdownModuleConfig && markdownModuleConfig.sanitize != null\r\n                        ? markdownModuleConfig.sanitize\r\n                        : SecurityContext.HTML,\r\n                },\r\n            ],\r\n        };\r\n    }\r\n    static forChild() {\r\n        return {\r\n            ngModule: MarkdownModule,\r\n        };\r\n    }\r\n}\r\nMarkdownModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMarkdownModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownModule, declarations: [LanguagePipe,\r\n        MarkdownComponent,\r\n        MarkdownPipe], exports: [LanguagePipe,\r\n        MarkdownComponent,\r\n        MarkdownPipe] });\r\nMarkdownModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MarkdownModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    exports: sharedDeclarations,\r\n                    declarations: sharedDeclarations,\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { KatexOptions, LanguagePipe, MarkdownComponent, MarkdownModule, MarkdownPipe, MarkdownService, MarkedOptions, PrismPlugin, SECURITY_CONTEXT, errorJoyPixelsNotLoaded, errorKatexNotLoaded, errorSrcWithoutHttpClient };\n//# sourceMappingURL=ngx-markdown.js.map\n"]},"metadata":{},"sourceType":"module"}