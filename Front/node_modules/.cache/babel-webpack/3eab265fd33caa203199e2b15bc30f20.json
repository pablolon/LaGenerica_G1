{"ast":null,"code":"import { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/modules/admin/apps/notes/notes.service\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/forms\";\n\nfunction NotesLabelsComponent_ng_container_12_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 13);\n    i0.ɵɵelementStart(2, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function NotesLabelsComponent_ng_container_12_ng_container_1_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const label_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.deleteLabel(label_r4.id);\n    });\n    i0.ɵɵelement(3, \"mat-icon\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function NotesLabelsComponent_ng_container_12_ng_container_1_Template_input_ngModelChange_4_listener($event) {\n      const label_r4 = ctx.$implicit;\n      return label_r4.title = $event;\n    })(\"input\", function NotesLabelsComponent_ng_container_12_ng_container_1_Template_input_input_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const label_r4 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.updateLabel(label_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const label_r4 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_solid:trash\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"autocomplete\", \"off\")(\"ngModel\", label_r4.title);\n  }\n}\n\nfunction NotesLabelsComponent_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NotesLabelsComponent_ng_container_12_ng_container_1_Template, 5, 3, \"ng-container\", 12);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const labels_r2 = ctx.ngIf;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", labels_r2)(\"ngForTrackBy\", ctx_r1.trackByFn);\n  }\n}\n\nexport class NotesLabelsComponent {\n  /**\n   * Constructor\n   */\n  constructor(_changeDetectorRef, _notesService) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._notesService = _notesService;\n    this.labelChanged = new Subject();\n    this._unsubscribeAll = new Subject();\n  } // -----------------------------------------------------------------------------------------------------\n  // @ Lifecycle hooks\n  // -----------------------------------------------------------------------------------------------------\n\n  /**\n   * On init\n   */\n\n\n  ngOnInit() {\n    // Get the labels\n    this.labels$ = this._notesService.labels$; // Subscribe to label updates\n\n    this.labelChanged.pipe(takeUntil(this._unsubscribeAll), debounceTime(500), filter(label => label.title.trim() !== ''), switchMap(label => this._notesService.updateLabel(label))).subscribe(() => {\n      // Mark for check\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n  /**\n   * On destroy\n   */\n\n\n  ngOnDestroy() {\n    // Unsubscribe from all subscriptions\n    this._unsubscribeAll.next();\n\n    this._unsubscribeAll.complete();\n  } // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n\n  /**\n   * Add label\n   *\n   * @param title\n   */\n\n\n  addLabel(title) {\n    this._notesService.addLabel(title).subscribe();\n  }\n  /**\n   * Update label\n   */\n\n\n  updateLabel(label) {\n    this.labelChanged.next(label);\n  }\n  /**\n   * Delete label\n   *\n   * @param id\n   */\n\n\n  deleteLabel(id) {\n    this._notesService.deleteLabel(id).subscribe(() => {\n      // Mark for check\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n  /**\n   * Track by function for ngFor loops\n   *\n   * @param index\n   * @param item\n   */\n\n\n  trackByFn(index, item) {\n    return item.id || index;\n  }\n\n}\n\nNotesLabelsComponent.ɵfac = function NotesLabelsComponent_Factory(t) {\n  return new (t || NotesLabelsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.NotesService));\n};\n\nNotesLabelsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NotesLabelsComponent,\n  selectors: [[\"notes-labels\"]],\n  decls: 14,\n  vars: 10,\n  consts: [[1, \"flex\", \"flex-col\", \"flex-auto\", \"w-80\", \"min-w-80\", \"p-2\", \"md:p-4\"], [1, \"flex\", \"items-center\", \"justify-between\"], [1, \"text-2xl\", \"font-semibold\"], [\"matDialogClose\", \"\", \"mat-icon-button\", \"\"], [3, \"svgIcon\"], [1, \"fuse-mat-dense\", \"w-full\", \"mt-8\", 3, \"floatLabel\"], [\"name\", \"new-label\", \"matInput\", \"\", 3, \"autocomplete\", \"placeholder\"], [\"newLabelInput\", \"\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [1, \"icon-size-5\", 3, \"svgIcon\"], [1, \"flex\", \"flex-col\", \"mt-4\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"fuse-mat-dense\", \"w-full\"], [\"mat-icon-button\", \"\", \"matPrefix\", \"\", 3, \"click\"], [\"required\", \"\", \"matInput\", \"\", 3, \"autocomplete\", \"ngModel\", \"ngModelChange\", \"input\"]],\n  template: function NotesLabelsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r9 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵtext(3, \"Edit labels\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 3);\n      i0.ɵɵelement(5, \"mat-icon\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-form-field\", 5);\n      i0.ɵɵelement(7, \"input\", 6, 7);\n      i0.ɵɵelementStart(9, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function NotesLabelsComponent_Template_button_click_9_listener() {\n        i0.ɵɵrestoreView(_r9);\n\n        const _r0 = i0.ɵɵreference(8);\n\n        ctx.addLabel(_r0.value);\n        return _r0.value = \"\";\n      });\n      i0.ɵɵelement(10, \"mat-icon\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 10);\n      i0.ɵɵtemplate(12, NotesLabelsComponent_ng_container_12_Template, 2, 2, \"ng-container\", 11);\n      i0.ɵɵpipe(13, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(8);\n\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:x\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"floatLabel\", \"always\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"autocomplete\", \"off\")(\"placeholder\", \"Create new label\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"invisible\", _r0.value.trim() === \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"svgIcon\", \"heroicons_solid:check-circle\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(13, 8, ctx.labels$));\n    }\n  },\n  directives: [i2.MatButton, i3.MatDialogClose, i4.MatIcon, i5.MatFormField, i6.MatInput, i5.MatSuffix, i7.NgIf, i7.NgForOf, i5.MatPrefix, i8.DefaultValueAccessor, i8.RequiredValidator, i8.NgControlStatus, i8.NgModel],\n  pipes: [i7.AsyncPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});","map":{"version":3,"sources":["/Users/pablolondono/Library/Mobile Documents/com~apple~CloudDocs/Documents/MinTic/Ciclo 4/Programación/SpringAngular/Fronts/Templates Angular/Fuse_Demo/src/app/modules/admin/apps/notes/labels/labels.component.ts","/Users/pablolondono/Library/Mobile Documents/com~apple~CloudDocs/Documents/MinTic/Ciclo 4/Programación/SpringAngular/Fronts/Templates Angular/Fuse_Demo/src/app/modules/admin/apps/notes/labels/labels.component.html"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { NotesService } from 'app/modules/admin/apps/notes/notes.service';\nimport { Label } from 'app/modules/admin/apps/notes/notes.types';\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\nimport { Observable, Subject } from 'rxjs';\n\n@Component({\n    selector       : 'notes-labels',\n    templateUrl    : './labels.component.html',\n    encapsulation  : ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotesLabelsComponent implements OnInit, OnDestroy\n{\n    labels$: Observable<Label[]>;\n\n    labelChanged: Subject<Label> = new Subject<Label>();\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _notesService: NotesService\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Get the labels\n        this.labels$ = this._notesService.labels$;\n\n        // Subscribe to label updates\n        this.labelChanged\n            .pipe(\n                takeUntil(this._unsubscribeAll),\n                debounceTime(500),\n                filter(label => label.title.trim() !== ''),\n                switchMap(label => this._notesService.updateLabel(label)))\n            .subscribe(() => {\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Add label\n     *\n     * @param title\n     */\n    addLabel(title: string): void\n    {\n        this._notesService.addLabel(title).subscribe();\n    }\n\n    /**\n     * Update label\n     */\n    updateLabel(label: Label): void\n    {\n        this.labelChanged.next(label);\n    }\n\n    /**\n     * Delete label\n     *\n     * @param id\n     */\n    deleteLabel(id: string): void\n    {\n        this._notesService.deleteLabel(id).subscribe(() => {\n\n            // Mark for check\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    /**\n     * Track by function for ngFor loops\n     *\n     * @param index\n     * @param item\n     */\n    trackByFn(index: number, item: any): any\n    {\n        return item.id || index;\n    }\n}\n","<div class=\"flex flex-col flex-auto w-80 min-w-80 p-2 md:p-4\">\n    <!-- Header -->\n    <div class=\"flex items-center justify-between\">\n        <div class=\"text-2xl font-semibold\">Edit labels</div>\n        <button\n            matDialogClose\n            mat-icon-button>\n            <mat-icon [svgIcon]=\"'heroicons_outline:x'\"></mat-icon>\n        </button>\n    </div>\n    <!-- New label -->\n    <mat-form-field\n        class=\"fuse-mat-dense w-full mt-8\"\n        [floatLabel]=\"'always'\">\n        <input\n            name=\"new-label\"\n            [autocomplete]=\"'off'\"\n            [placeholder]=\"'Create new label'\"\n            matInput\n            #newLabelInput>\n        <button\n            [class.invisible]=\"newLabelInput.value.trim() === ''\"\n            mat-icon-button\n            (click)=\"addLabel(newLabelInput.value); newLabelInput.value = ''\"\n            matSuffix>\n            <mat-icon\n                class=\"icon-size-5\"\n                [svgIcon]=\"'heroicons_solid:check-circle'\"></mat-icon>\n        </button>\n    </mat-form-field>\n    <!-- Labels -->\n    <div class=\"flex flex-col mt-4\">\n        <ng-container *ngIf=\"(labels$ | async) as labels\">\n            <ng-container *ngFor=\"let label of labels; trackBy: trackByFn\">\n                <mat-form-field class=\"fuse-mat-dense w-full\">\n                    <button\n                        mat-icon-button\n                        matPrefix\n                        (click)=\"deleteLabel(label.id)\">\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            [svgIcon]=\"'heroicons_solid:trash'\"></mat-icon>\n                    </button>\n                    <input\n                        [autocomplete]=\"'off'\"\n                        [(ngModel)]=\"label.title\"\n                        (input)=\"updateLabel(label)\"\n                        required\n                        matInput>\n                </mat-form-field>\n            </ng-container>\n        </ng-container>\n    </div>\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}